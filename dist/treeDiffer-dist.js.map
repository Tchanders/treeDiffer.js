{"version":3,"sources":["../build/intro.js.txt","../src/treeDiffer.js","../src/treeDiffer.TreeNode.js","../src/treeDiffer.Tree.js","../src/treeDiffer.Differ.js","../build/export.js","../build/outro.js.txt"],"names":[],"mappings":"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","file":"treeDiffer-dist.js","sourcesContent":["/*!\n * treeDiffer.js\n *\n * Version 1.1.1\n * https://github.com/Tchanders/treeDiffer.js\n *\n * Released under the MIT license\n */\n( function ( global ) {\n\n'use strict';\n","/*!\n * treeDiffer Namespace for treeDiffer.js\n *\n * Released under the MIT license\n */\n\n// eslint-disable-next-line no-redeclare, no-unused-vars\nconst treeDiffer = {};\n","/*!\n * treeDiffer.TreeNode\n *\n * Released under the MIT license\n */\n\n/**\n * TreeNode\n *\n * Abstract TreeNode class for Trees to be diffed. It should be extended,\n * then a Tree should be built by passing the root node and the name of\n * the new class into the Tree constructor.\n *\n * @class\n * @constructor\n * @param {Object} node Object representing a node to be wrapped\n */\ntreeDiffer.TreeNode = function ( node ) {\n\t/**\n\t * @property {Object} node Object representing the wrapped node\n\t */\n\tthis.node = node;\n\n\t/**\n\t * @property {treeDiffer.TreeNode[]} children Child nodes\n\t */\n\tthis.children = [];\n\n\t/**\n\t * @property {number} index Index in node list ordered by deepest-first then document order\n\t */\n\tthis.index = null;\n\n\t/**\n\t * @property {number} leftmost Leftmost of this node; see treeDiffer.Tree\n\t */\n\tthis.leftmost = null;\n};\n\n/**\n * Add a node to the list of this node's children\n *\n * @param {treeDiffer.TreeNode} child\n */\ntreeDiffer.TreeNode.prototype.addChild = function ( child ) {\n\tthis.children.push( child );\n\tchild.parent = this;\n};\n\n/**\n * @method\n * Check if another TreeNode is equal to this node. Conditions for equality\n * will depend on the use case.\n *\n * @param {treeDiffer.TreeNode} other The other TreeNode\n * @return {boolean} True if equal\n */\ntreeDiffer.TreeNode.prototype.isEqual = null;\n\n/**\n * Get the children of the node that this tree node wraps. How to\n * find and filter children will depend on the use case.\n *\n * @method\n * @return {Object[]} Children of the wrapped node\n */\ntreeDiffer.TreeNode.prototype.getOriginalNodeChildren = null;\n","/*!\n * treeDiffer.Tree\n *\n * Released under the MIT license\n */\n\n/**\n * Tree\n *\n * A group of TreeNodes connected by parent-child relationships in a tree\n * structure, along with certain properties that define the exact structure of the\n * tree: the node order, the keyroots, and the leftmost node of each node. (Terms\n * defined in: http://epubs.siam.org/doi/abs/10.1137/0218082?journalCode=smjcat)\n *\n * @class\n * @constructor\n *\n * @param {treeDiffer.TreeNode} node Root node of the tree\n * @param {Function} nodeClass Concrete subclass of treeDiffer.TreeNode\n * @param {Object} config Config options for nodeClass\n */\ntreeDiffer.Tree = function ( node, nodeClass, config ) {\n\n\tthis.root = null;\n\tthis.nodeClass = nodeClass;\n\tthis.orderedNodes = [];\n\tthis.keyRoots = [];\n\n\tthis.findKeyRootsAndOrderedNodes( node, config );\n\n};\n\n/**\n * Find the post-ordering of the tree nodes, the keyroots and the leftmost of each\n * node.\n *\n * @param {Object} node Root node in original tree\n * @param {Object} config Config options for nodeClass\n */\ntreeDiffer.Tree.prototype.findKeyRootsAndOrderedNodes = function ( node, config ) {\n\tconst leftmostsToKeyRoots = {},\n\t\ttree = this;\n\n\t/**\n\t * Find the tree nodes in post-order, find the leftmost of each node, and store\n\t * the order and leftmost as properties of the nodes.\n\t *\n\t * @param {treeDiffer.TreeNode} treeNode Node currently being checked\n\t * @param {Array} orderedNodes Array to be populated with nodes in order\n\t */\n\tfunction postOrderNodes( treeNode, orderedNodes ) {\n\t\tconst children = treeNode.getOriginalNodeChildren();\n\n\t\tfor ( let i = 0, ilen = children.length; i < ilen; i++ ) {\n\t\t\t// eslint-disable-next-line new-cap\n\t\t\tconst childNode = new tree.nodeClass( children[ i ], config );\n\t\t\ttreeNode.addChild( childNode );\n\t\t\tpostOrderNodes( childNode, orderedNodes );\n\t\t}\n\n\t\t// Record node order\n\t\torderedNodes.push( treeNode );\n\t\ttreeNode.index = orderedNodes.length - 1;\n\n\t\t// Record index of leftmost node\n\t\t// If this node is a leaf, it is its own leftmost\n\t\ttreeNode.leftmost = treeNode.children.length === 0 ? treeNode.index : treeNode.children[ 0 ].leftmost;\n\n\t\t// Update the key root corresponding to this leftmost\n\t\t// A keyroot is the higest indexed node with each leftmost\n\t\tleftmostsToKeyRoots[ treeNode.leftmost ] = treeNode.index;\n\t}\n\n\t// Store the nodes in order\n\t// eslint-disable-next-line new-cap\n\tthis.root = new tree.nodeClass( node, config );\n\tthis.orderedNodes = [];\n\tpostOrderNodes( this.root, this.orderedNodes );\n\n\t// Store the key roots in order of node index\n\tfor ( const leftmost in leftmostsToKeyRoots ) {\n\t\tthis.keyRoots.push( leftmostsToKeyRoots[ leftmost ] );\n\t}\n\tthis.keyRoots.sort( ( a, b ) => a - b );\n\n};\n\n/**\n * Get all the descendants of a node\n *\n * @param {treeDiffer.TreeNode} node Node whose descendants to find\n * @return {Array} Descendants of the node\n */\ntreeDiffer.Tree.prototype.getNodeDescendants = function ( node ) {\n\tconst descendants = [];\n\n\tfunction addDescendants( parentNode ) {\n\t\tfor ( let i = 0, ilen = parentNode.children.length; i < ilen; i++ ) {\n\t\t\tconst childNode = parentNode.children[ i ];\n\t\t\tdescendants.push( childNode );\n\t\t\taddDescendants( childNode );\n\t\t}\n\t}\n\n\taddDescendants( node );\n\n\treturn descendants;\n};\n","/*!\n * treeDiffer.Differ\n *\n * Released under the MIT license\n */\n\n/* eslint-disable dot-notation */\n// We use [ 'null' ] as an index, but for consistencty with\n// variable indicies [ i ][ j ] we prefer not to use dot notation\n\n/**\n * Differ\n *\n * Find the minimum transactions to get from the first tree to the second tree. Each\n * transaction is of the form [nodeToRemove, nodeToInsert], where nodeToRemove or\n * nodeToInsert (but not both) can be null. The tree diffing algorithm is presented in:\n * http://epubs.siam.org/doi/abs/10.1137/0218082?journalCode=smjcat\n *\n * @class\n * @constructor\n * @param {treeDiffer.Tree} tree1 First tree\n * @param {treeDiffer.Tree} tree2 Second tree\n * @param {number} [timeout=1000] Timeout after which to stop diffing\n */\ntreeDiffer.Differ = function ( tree1, tree2, timeout ) {\n\n\tthis.endTime = Date.now() + ( timeout || 1000 );\n\n\tthis.tree1 = tree1;\n\tthis.tree2 = tree2;\n\n\tthis.insertCost = 1;\n\tthis.removeCost = 1;\n\tthis.changeCost = 1;\n\n\t// Temporary, changing store of transactions\n\tconst transactions = {\n\t\tnull: {\n\t\t\tnull: []\n\t\t}\n\t};\n\n\t// Permanent store of transactions such that transactions[x][y] is the minimum\n\t// transactions to get from the sub-tree rooted at node x (in tree1) to the sub-tree\n\t// rooted at node y (in tree2).\n\tthis.transactions = {\n\t\tnull: {}\n\t};\n\n\t// All possible transactions\n\tthis.indexToTransaction = [];\n\tthis.indexToTransaction.push( [ null, null ] );\n\n\tlet transactionIndex = 0;\n\t// Indices for each transaction, to avoid high performance cost of creating the\n\t// transactions multiple times\n\tthis.transactionToIndex = {\n\t\tnull: {\n\t\t\tnull: 0\n\t\t}\n\t};\n\ttransactionIndex += 1;\n\n\t// Populate transaction stores\n\tfor ( let i = 0, ilen = this.tree1.orderedNodes.length; i < ilen; i++ ) {\n\n\t\ttransactions[ i ] = {\n\t\t\tnull: []\n\t\t};\n\t\tthis.transactionToIndex[ i ] = {\n\t\t\tnull: transactionIndex\n\t\t};\n\t\ttransactionIndex += 1;\n\t\tthis.indexToTransaction.push( [ i, null ] );\n\n\t\tfor ( let j = 0, jlen = this.tree2.orderedNodes.length; j < jlen; j++ ) {\n\t\t\ttransactions[ null ][ j ] = [];\n\t\t\ttransactions[ i ][ j ] = [];\n\n\t\t\tthis.transactionToIndex[ null ][ j ] = transactionIndex;\n\t\t\ttransactionIndex += 1;\n\t\t\tthis.indexToTransaction.push( [ null, j ] );\n\n\t\t\tthis.transactionToIndex[ i ][ j ] = transactionIndex;\n\t\t\ttransactionIndex += 1;\n\t\t\tthis.indexToTransaction.push( [ i, j ] );\n\t\t}\n\n\t\tthis.transactions[ i ] = {};\n\n\t}\n\n\tthis.populateTransactions( transactions );\n};\n\n/**\n * Populate this.transactions with minimum transactions between all possible trees\n *\n * @param {Object} transactions Temporary store of transactions between trees\n */\ntreeDiffer.Differ.prototype.populateTransactions = function ( transactions ) {\n\tconst differ = this;\n\n\tfunction getTransactionFromIndex( index ) {\n\t\treturn differ.indexToTransaction[ index ];\n\t}\n\n\tfor ( let i = 0, ilen = this.tree1.keyRoots.length; i < ilen; i++ ) {\n\n\t\t// Make transactions for tree -> null\n\t\tconst keyRoot1 = this.tree1.orderedNodes[ this.tree1.keyRoots[ i ] ];\n\t\tconst iNulls = [];\n\t\tfor ( let ii = keyRoot1.leftmost; ii < keyRoot1.index + 1; ii++ ) {\n\t\t\tiNulls.push( this.transactionToIndex[ ii ][ null ] );\n\t\t\ttransactions[ ii ][ null ] = iNulls.slice();\n\t\t}\n\n\t\tfor ( let j = 0, jlen = this.tree2.keyRoots.length; j < jlen; j++ ) {\n\n\t\t\t// Make transactions of null -> tree\n\t\t\tconst keyRoot2 = this.tree2.orderedNodes[ this.tree2.keyRoots[ j ] ];\n\t\t\tconst jNulls = [];\n\t\t\tfor ( let jj = keyRoot2.leftmost; jj < keyRoot2.index + 1; jj++ ) {\n\t\t\t\tjNulls.push( this.transactionToIndex[ null ][ jj ] );\n\t\t\t\ttransactions[ null ][ jj ] = jNulls.slice();\n\t\t\t}\n\n\t\t\t// Get the diff\n\t\t\tthis.findMinimumTransactions( keyRoot1, keyRoot2, transactions );\n\n\t\t\tif ( Date.now() > this.endTime ) {\n\t\t\t\tthis.transactions = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor ( let i = 0, ilen = this.tree1.orderedNodes.length; i < ilen; i++ ) {\n\t\tfor ( let j = 0, jlen = this.tree2.orderedNodes.length; j < jlen; j++ ) {\n\t\t\tif ( this.transactions[ i ][ j ] && this.transactions[ i ][ j ].length > 0 ) {\n\t\t\t\tthis.transactions[ i ][ j ] = this.transactions[ i ][ j ].map( getTransactionFromIndex );\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n/**\n * Get the cost of removing a node from the first tree, inserting a node into the second\n * tree, or relabelling a node from the first tree to a node from the second tree.\n *\n * @param {treeDiffer.TreeNode} node1 Node from the first tree\n * @param {treeDiffer.TreeNode} node2 Node from the second tree]\n * @return {number} Cost of the transaction\n */\ntreeDiffer.Differ.prototype.getNodeDistance = function ( node1, node2 ) {\n\tif ( node1 === null && node2 === null ) {\n\t\treturn 0;\n\t}\n\tif ( node1 === null ) {\n\t\treturn this.insertCost;\n\t}\n\tif ( node2 === null ) {\n\t\treturn this.removeCost;\n\t}\n\tif ( node1.isEqual( node2 ) ) {\n\t\treturn 0;\n\t}\n\treturn this.changeCost;\n};\n\n/**\n * Find the minimum transactions to get from the first tree to the second tree. This\n * method is the heart of the tree differ.\n *\n * @param {treeDiffer.TreeNode} keyRoot1 A keyroot from the first tree\n * @param {treeDiffer.TreeNode} keyRoot2 A keyroot from the second tree\n * @param {Object} transactions Temporary store of transactions between trees\n */\ntreeDiffer.Differ.prototype.findMinimumTransactions = function ( keyRoot1, keyRoot2, transactions ) {\n\tfunction getLowestCost( removeCost, insertCost, changeCost ) {\n\t\t// This used to be written as:\n\t\t//  transaction = costs.indexOf( Math.min.apply( null, costs ) )\n\t\t// but expanding into two simple comparisons makes it much faster.\n\t\tlet minCost = removeCost,\n\t\t\tindex = 0;\n\t\tif ( insertCost < minCost ) {\n\t\t\tindex = 1;\n\t\t\tminCost = insertCost;\n\t\t}\n\t\tif ( changeCost < minCost ) {\n\t\t\tindex = 2;\n\t\t}\n\t\treturn index;\n\t}\n\n\tfor ( let i = keyRoot1.leftmost; i < keyRoot1.index + 1; i++ ) {\n\t\tconst iMinus1 = i === keyRoot1.leftmost ? null : i - 1;\n\t\tconst orderedNode1 = this.tree1.orderedNodes[ i ];\n\n\t\tfor ( let j = keyRoot2.leftmost; j < keyRoot2.index + 1; j++ ) {\n\t\t\tconst jMinus1 = j === keyRoot2.leftmost ? null : j - 1;\n\t\t\tconst orderedNode2 = this.tree2.orderedNodes[ j ];\n\n\t\t\tif ( orderedNode1.leftmost === keyRoot1.leftmost && orderedNode2.leftmost === keyRoot2.leftmost ) {\n\n\t\t\t\t// Previous transactions, leading up to a remove, insert or change\n\t\t\t\tconst remove = transactions[ iMinus1 ][ j ];\n\t\t\t\tconst insert = transactions[ i ][ jMinus1 ];\n\t\t\t\tconst change = transactions[ iMinus1 ][ jMinus1 ];\n\n\t\t\t\tconst nodeDistance = this.getNodeDistance( orderedNode1, orderedNode2 );\n\n\t\t\t\t// Cost of each transaction\n\t\t\t\tconst transaction = getLowestCost(\n\t\t\t\t\tremove.length + this.removeCost,\n\t\t\t\t\tinsert.length + this.insertCost,\n\t\t\t\t\tchange.length + nodeDistance\n\t\t\t\t);\n\n\t\t\t\tif ( transaction === 0 ) {\n\t\t\t\t\t// Record a remove\n\t\t\t\t\t( transactions[ i ][ j ] = remove.slice() ).push(\n\t\t\t\t\t\tthis.transactionToIndex[ i ][ null ]\n\t\t\t\t\t);\n\t\t\t\t} else if ( transaction === 1 ) {\n\t\t\t\t\t// Record an insert\n\t\t\t\t\t( transactions[ i ][ j ] = insert.slice() ).push(\n\t\t\t\t\t\tthis.transactionToIndex[ null ][ j ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttransactions[ i ][ j ] = change.slice();\n\t\t\t\t\t// If nodes i and j are different, record a change,\n\t\t\t\t\t// otherwise there is no transaction\n\t\t\t\t\tif ( nodeDistance === 1 ) {\n\t\t\t\t\t\ttransactions[ i ][ j ].push( this.transactionToIndex[ i ][ j ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.transactions[ i ][ j ] = transactions[ i ][ j ].slice();\n\t\t\t} else {\n\n\t\t\t\t// Previous transactions, leading up to a remove, insert or change\n\t\t\t\tconst remove = transactions[ iMinus1 ][ j ];\n\t\t\t\tconst insert = transactions[ i ][ jMinus1 ];\n\t\t\t\tconst change = transactions[\n\t\t\t\t\torderedNode1.leftmost - 1 < keyRoot1.leftmost ? null : orderedNode1.leftmost - 1\n\t\t\t\t][\n\t\t\t\t\torderedNode2.leftmost - 1 < keyRoot2.leftmost ? null : orderedNode2.leftmost - 1\n\t\t\t\t];\n\n\t\t\t\tconst transaction = getLowestCost(\n\t\t\t\t\tremove.length + this.removeCost,\n\t\t\t\t\tinsert.length + this.insertCost,\n\t\t\t\t\tchange.length + this.transactions[ i ][ j ].length\n\t\t\t\t);\n\t\t\t\tif ( transaction === 0 ) {\n\t\t\t\t\t// Record a remove\n\t\t\t\t\t( transactions[ i ][ j ] = remove.slice() ).push(\n\t\t\t\t\t\tthis.transactionToIndex[ i ][ null ]\n\t\t\t\t\t);\n\t\t\t\t} else if ( transaction === 1 ) {\n\t\t\t\t\t// Record an insert\n\t\t\t\t\t( transactions[ i ][ j ] = insert.slice() ).push(\n\t\t\t\t\t\tthis.transactionToIndex[ null ][ j ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Record a change\n\t\t\t\t\ttransactions[ i ][ j ] = change.concat( this.transactions[ i ][ j ] );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n};\n\n/**\n * Given a set of transactions and the lengths of two trees, find the nodes that\n * correspond.\n *\n * @param {Array} transactions Minimum transactions to get from the first tree to the\n * second tree\n * @param {number} oldTreeLength Number of nodes in the first tree\n * @param {number} newTreeLength Number of nodes in the second tree\n * @return {Object} Corresponding nodes\n */\ntreeDiffer.Differ.prototype.getCorrespondingNodes = function ( transactions, oldTreeLength, newTreeLength ) {\n\tconst oldToNew = {},\n\t\tnewToOld = {},\n\t\tremove = [],\n\t\tinsert = [],\n\t\tchange = {},\n\t\tilen = Math.max( oldTreeLength, newTreeLength ),\n\t\tjlen = ilen;\n\n\tfor ( let i = 0; i < transactions.length; i++ ) {\n\t\tif ( transactions[ i ][ 0 ] === null ) {\n\t\t\tinsert.push( transactions[ i ][ 1 ] );\n\t\t} else if ( transactions[ i ][ 1 ] === null ) {\n\t\t\tremove.push( transactions[ i ][ 0 ] );\n\t\t} else {\n\t\t\toldToNew[ transactions[ i ][ 0 ] ] = transactions[ i ][ 1 ];\n\t\t\tnewToOld[ transactions[ i ][ 1 ] ] = transactions[ i ][ 0 ];\n\t\t\tchange[ transactions[ i ][ 0 ] ] = transactions[ i ][ 1 ];\n\t\t}\n\t}\n\n\tconst rem = remove.slice();\n\tconst ins = insert.slice();\n\n\tremove.sort( ( a, b ) => a - b );\n\tinsert.sort( ( a, b ) => a - b );\n\n\tfor ( let i = 0, j = 0; i < ilen && j < jlen; i++, j++ ) {\n\t\tif ( i === remove[ 0 ] ) {\n\t\t\t// Old node is a remove\n\t\t\tremove.shift();\n\t\t\tj--;\n\t\t} else if ( j === insert[ 0 ] ) {\n\t\t\t// New node is an insert\n\t\t\tinsert.shift();\n\t\t\ti--;\n\t\t} else if ( !( i in oldToNew ) && !( j in newToOld ) ) {\n\t\t\t// Neither is changed, so they must correspond\n\t\t\t// NB Moves don't exist to the tree differ\n\t\t\toldToNew[ i ] = j;\n\t\t\tnewToOld[ j ] = i;\n\t\t} else if ( !( i in oldToNew ) ) {\n\t\t\t// Old node is unchanged, new node is changed\n\t\t\ti--;\n\t\t} else if ( !( j in newToOld ) ) {\n\t\t\t// New node is unchanged, old node is changed\n\t\t\tj--;\n\t\t}\n\t}\n\n\treturn {\n\t\toldToNew: oldToNew,\n\t\tnewToOld: newToOld,\n\t\tremove: rem,\n\t\tinsert: ins,\n\t\tchange: change\n\t};\n};\n","// eslint-disable-next-line strict\nif ( typeof module !== 'undefined' && module.exports ) {\n\tmodule.exports = treeDiffer;\n} else {\n\tglobal.treeDiffer = treeDiffer;\n}\n","}( this ) );\n"]}